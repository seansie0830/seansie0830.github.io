<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>物件導向 on seansie&#39;s blog</title>
    <link>https://seansie0830.github.io/tags/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</link>
    <description>Recent content in 物件導向 on seansie&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 08 Feb 2025 12:13:03 +0800</lastBuildDate>
    <atom:link href="https://seansie0830.github.io/tags/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 多載介紹 (運算子多載&amp;函數多載) | seansie blog</title>
      <link>https://seansie0830.github.io/posts/cpp-overloading-intro/</link>
      <pubDate>Sat, 08 Feb 2025 12:13:03 +0800</pubDate>
      <guid>https://seansie0830.github.io/posts/cpp-overloading-intro/</guid>
      <description>簡介 多載(overloading)這個概念有點像是 破音字 的概念，例如”吃”這個字，在”吃東西”這個語境下，念(音:痴)，而在”口吃”這個字念(音 : 級)，同一個字，可以根據上下文來決定不同意義。&#xA;而C++的多載也一樣，也就是同一個東西(例如函數、運算子等等)，可能會根據上下文來決定不同的意義。&#xA;函數多載 為什麼要用這個? 想像一下，我們要實作一個相加(這只是為了舉例方便而已，實際上更難)的函數，而因為 C++有不同的 資料型態 ，所以每個資料型態都要分別定義自己的函數。&#xA;int addInt(int a, int b) { return a + b; } double addDouble(double a, double b) { return a + b; } float addFloat(float a, float b) { return a + b; } string addString(string a, string b) { return a + b; } 然後要使用的時候，還要分別記住 addInt、addDouble、addFloat 和 addString，不僅沒有效率，這樣要用的時候還容易出錯，且程式碼會變得冗長、難以維護。&#xA;int main() { int intResult = addInt(5, 3); // 使用 addInt double doubleResult = addDouble(2.</description>
    </item>
    <item>
      <title> 物件導向四大原則 封裝 抽象 繼承 多形 介紹 | seansie blog</title>
      <link>https://seansie0830.github.io/posts/cpp-oop-4rule-intro/</link>
      <pubDate>Thu, 06 Feb 2025 12:51:52 +0800</pubDate>
      <guid>https://seansie0830.github.io/posts/cpp-oop-4rule-intro/</guid>
      <description>甚麼是物件導向 簡而言之，物件導向是一種抽象化的概念。在當今軟體開發需求快速變遷的時代，物件導向所帶來的便利性至關重要。&#xA;其實，「抽象」並不可怕，它反而能簡化問題，讓開發者專注於真正核心的業務邏輯。&#xA;舉個例子，其實物件導向就像日常生活的包裝，沒有了他其實也沒什麼大不了的，甚至對於生產者來說更方便，因為不用準備包裝的成本。&#xA;但是對於消費者來說，包裝對於日常使用的方便性是非常重要的，它可以保護內部重要部分(也就是對應封裝) 簡化功能，例如像是鋁箔飲料，保留一個孔洞提供吸管插入(對應抽象)。 以包裝為藍本進行客製化，像是客製化便當之類的，對應繼承。 最後，不同的便當，可以透過相同的&amp;quot;取餐流程&amp;quot;交給顧客，例如取餐號碼牌，這就是多型。 而 剛剛的比喻中，封裝、抽象、繼承跟多形這四個重要概念是物件導向的基石，讓開發者能更靈活的面對各種變動的需求。&#xA;封裝與抽象 這兩個要一起說。因為互為因果，為了抽象所以封裝。&#xA;再舉個例子，大家使用電腦的時候，應該都是用鍵盤滑鼠操作吧，而不是打開主機板，用電流來操作裡面的晶片，這種如此荒唐的操作方法。&#xA;為甚麼不行呢? 因為裡面的電路與晶片非常脆弱阿，一不小心搞到短路還是怎樣，就會整台報銷了。&#xA;因此這些東西會被一個外殼保護起來，這個外殼在物件導向的世界中叫做封裝。&#xA;對了，那物件中哪個東西就如同電腦主機板一樣脆弱呢?&#xA;通常是資料，因為可以任意修改，沒辦法驗證，比如說把年齡設成負數，或是把金額設成無限大，這些不合理的數值，都有可能導致程式出錯甚至崩潰。因此，我們會將資料封裝起來，不讓外部直接存取。&#xA;那要如何存取被封裝的資料呢？這時候就輪到成員函數 (Member function) 登場了。方法就像是電腦的鍵盤滑鼠，提供一個安全的介面，讓外部可以間接地操作資料。在方法中，我們可以加入邏輯判斷，確保資料的正確性，例如：在設定年齡的方法中，我們可以檢查傳入的值是否為正整數；在設定金額的方法中，我們可以檢查是否超過預算上限。&#xA;抽象 (Abstraction) 則是將複雜的內部實作細節隱藏起來，只暴露必要的資訊給外部。使用者不需要知道電腦內部是如何運作的，只需要知道如何透過鍵盤滑鼠來操作電腦即可。同樣地，使用者也不需要知道物件內部的資料是如何儲存和處理的，只需要知道如何透過物件提供的方法來操作物件即可。&#xA;所以，封裝的目的是為了保護資料，而抽象的目的是為了簡化操作。兩者相輔相成，共同構成了物件導向程式設計的基石。透過封裝和抽象，我們可以建立出更安全、更易用、更易維護的程式。&#xA;C++ 中的實作 class myClass{ public: private: } 裡面的 public 跟 private 代表裡面對應的資源的可視性 (visibility) 。&#xA;如果是 public 就可以被外界存取，而 private 只能被內部 (在 {} 之內的函數)存取。&#xA;有沒有發現 public 跟 private 剛好對應到對外的抽象與對內封裝，並且剛剛又提到資料因為更改不可驗證而很脆弱，因此要被封裝起來，所以 private 裡面基本上都是儲存資料。&#xA;反觀 public 是給外部用的，對應到向外的抽象介面，也就是公開的成員函數，函數是介面的一種。&#xA;設計的原則是，如同電腦的鍵盤滑鼠一樣，當使用者使用介面的時候，只需要知道意圖，而裡面的細節是介面要自己完成的，要盡量隱藏瑣碎的細節。&#xA;順帶一提，還有一些抽象介面的準則要遵守，例如。&#xA;高內聚性： 每個公開方法應該負責單一且明確的任務。例如，與其提供一個只取得半徑的 public 方法，然後讓使用者自行計算球體面積，不如直接提供一個 calculateSphereArea() 方法，讓使用者可以直接取得球體面積，提高程式碼的可讀性和易用性。 最少暴露原則 (Principle of Least Privilege)： 只有在真正需要被外部存取時，才將成員設為 public。這有助於降低程式碼之間的耦合度，並提高程式碼的可維護性。 繼承與多形 繼承：客製化便當的基礎 如果說物件導向是一家便當店，那麼繼承就是推出「客製化便當」的好方法。</description>
    </item>
  </channel>
</rss>
